class ItemModel {
  String? Item_No;
  String? Item_Name;
  String? Ename;
  String? Unit;
  double? Price;
  double? OL;
  double? OQ1;
  String? Type_No;
  int? pack;
  double? QOH;
  double? OQ2;
  String? place;
  double? Wcost;
  double? Ecost;
  double? Hcost;
  double? Lcost;
  String? dno;
  double? enqty;
  double? inqty;
  double? resqty;
  double? offerqty;
  String? Country;
  bool? Original;
  double? tax;
  int? UnitIn;
  int? UnitOut;
  int? Convert;
  String? barcode;
  bool? TaxCheck;
  bool? Expired;
  bool? AllowExp;
  String? Packitem;
  String? p_local;
  String? p_export;
  String? S_cash;
  String? S_debt;
  double? Flavor_No;
  double? Composition;
  String? Packing;
  String? Carton;
  String? Lable;
  String? Bottle;
  String? Shrink;
  String? Binding;
  double? Active;
  double? NotActive;
  double? density;
  double? ORdQty;
  String? ExpiryPeriod;
  String? ItemSpec;
  int? originno;
  double? pack40;
  double? pack20;
  int? brandno;
  double? PrPer;
  int? Type;
  String? ITEM_DESC;
  int? TaxNo;
  double? smallPrice;
  int? accf_no;
  int? Status;
  int? FamilieNo;
  int? accinvf;
  int? storinvf;
  double? ItemWeight;
  int? IsActive;
  String? QRCODE;
  bool? UseSerial;
  int? Unitsale;
  int? Cus_Price;
  bool? IsServiceItem;
  bool? Is_Kit;
  int? Item_Type;
  int? Serial_no;
  String? Shortcut_Name;
  int? CurrNo;
  String? StartSerial;

  ItemModel({
    required this.Item_No,
    required this.Item_Name,
    required this.Ename,
    required this.Unit,
    required this.Price,
    required this.OL,
    required this.OQ1,
    required this.Type_No,
    required this.pack,
    required this.QOH,
    required this.OQ2,
    required this.place,
    required this.Wcost,
    required this.Ecost,
    required this.Hcost,
    required this.Lcost,
    required this.dno,
    required this.enqty,
    required this.inqty,
    required this.resqty,
    required this.offerqty,
    required this.Country,
    required this.Original,
    required this.tax,
    required this.UnitIn,
    required this.UnitOut,
    required this.Convert,
    required this.barcode,
    required this.TaxCheck,
    required this.Expired,
    required this.AllowExp,
    required this.Packitem,
    required this.p_local,
    required this.p_export,
    required this.S_cash,
    required this.S_debt,
    required this.Flavor_No,
    required this.Composition,
    required this.Packing,
    required this.Carton,
    required this.Lable,
    required this.Bottle,
    required this.Shrink,
    required this.Binding,
    required this.Active,
    required this.NotActive,
    required this.density,
    required this.ORdQty,
    required this.ExpiryPeriod,
    required this.ItemSpec,
    required this.originno,
    required this.pack40,
    required this.pack20,
    required this.brandno,
    required this.PrPer,
    required this.Type,
    required this.ITEM_DESC,
    required this.TaxNo,
    required this.smallPrice,
    required this.accf_no,
    required this.Status,
    required this.FamilieNo,
    required this.accinvf,
    required this.storinvf,
    required this.ItemWeight,
    required this.IsActive,
    required this.QRCODE,
    required this.UseSerial,
    required this.Unitsale,
    required this.Cus_Price,
    required this.IsServiceItem,
    required this.Is_Kit,
    required this.Item_Type,
    required this.Serial_no,
    required this.Shortcut_Name,
    required this.CurrNo,
    required this.StartSerial,
  });
  factory ItemModel.fromMap(Map<String, dynamic> map) {
    return ItemModel(
      Item_No: map['Item_No'],
      Item_Name: map['Item_Name'],
      Ename: map['Ename'],
      Unit: map['Unit'],
      Price: map['Price'],
      OL: map['OL'],
      OQ1: map['OQ1'],
      Type_No: map['Type_No'],
      pack: map['pack'],
      QOH: map['QOH'],
      OQ2: map['OQ2'],
      place: map['place'],
      Wcost: map['Wcost'],
      Ecost: map['Ecost'],
      Hcost: map['Hcost'],
      Lcost: map['Lcost'],
      dno: map['dno'],
      enqty: map['enqty'],
      inqty: map['inqty'],
      resqty: map['resqty'],
      offerqty: map['offerqty'],
      Country: map['Country'],
      Original: map['Original'] == 1, // Convert to bool
      tax: map['tax'],
      UnitIn: map['UnitIn'],
      UnitOut: map['UnitOut'],
      Convert: map['Convert'],
      barcode: map['barcode'],
      TaxCheck: map['TaxCheck'] == 1, // Convert to bool
      Expired: map['Expired'] == 1, // Convert to bool
      AllowExp: map['AllowExp'] == 1, // Convert to bool
      Packitem: map['Packitem'],
      p_local: map['p_local'],
      p_export: map['p_export'],
      S_cash: map['S_cash'],
      S_debt: map['S_debt'],
      Flavor_No: map['Flavor_No'],
      Composition: map['Composition'],
      Packing: map['Packing'],
      Carton: map['Carton'],
      Lable: map['Lable'],
      Bottle: map['Bottle'],
      Shrink: map['Shrink'],
      Binding: map['Binding'],
      Active: map['Active'],
      NotActive: map['NotActive'],
      density: map['density'],
      ORdQty: map['ORdQty'],
      ExpiryPeriod: map['ExpiryPeriod'],
      ItemSpec: map['ItemSpec'],
      originno: map['originno'],
      pack40: map['pack40'],
      pack20: map['pack20'],
      brandno: map['brandno'],
      PrPer: map['PrPer'],
      Type: map['Type'],
      ITEM_DESC: map['ITEM_DESC'],
      TaxNo: map['TaxNo'],
      smallPrice: map['smallPrice'],
      accf_no: map['accf_no'],
      Status: map['Status'],
      FamilieNo: map['FamilieNo'],
      accinvf: map['accinvf'],
      storinvf: map['storinvf'],
      ItemWeight: map['ItemWeight'],
      IsActive: map['IsActive'],
      QRCODE: map['QRCODE'],
      UseSerial: map['UseSerial'] == 1, // Convert to bool
      Unitsale: map['Unitsale'],
      Cus_Price: map['Cus_Price'],
      IsServiceItem: map['IsServiceItem'] == 1, // Convert to bool
      Is_Kit: map['Is_Kit'] == 1, // Convert to bool
      Item_Type: map['Item_Type'],
      Serial_no: map['Serial_no'],
      Shortcut_Name: map['Shortcut_Name'],
      CurrNo: map['CurrNo'],
      StartSerial: map['StartSerial'],
    );
  }

  // Convert to a Map
  Map<String, dynamic> toMap() {
    return {
      'item_No': Item_No,
      'Item_Name': Item_Name,
      'Ename': Ename,
      'Unit': Unit,
      'Price': Price,
      'OL': OL,
      'OQ1': OQ1,
      'Type_No': Type_No,
      'pack': pack,
      'QOH': QOH,
      'OQ2': OQ2,
      'place': place,
      'Wcost': Wcost,
      'Ecost': Ecost,
      'Hcost': Hcost,
      'Lcost': Lcost,
      'dno': dno,
      'enqty': enqty,
      'inqty': inqty,
      'resqty': resqty,
      'offerqty': offerqty,
      'Country': Country,
      'Original': Original , // Convert to integer
      'tax': tax,
      'UnitIn': UnitIn,
      'UnitOut': UnitOut,
      'Convert': Convert,
      'barcode': barcode,
      'TaxCheck': TaxCheck , // Convert to integer
      'Expired': Expired , // Convert to integer
      'AllowExp': AllowExp , // Convert to integer
      'Packitem': Packitem,
      'p_local': p_local,
      'p_export': p_export,
      'S_cash': S_cash,
      'S_debt': S_debt,
      'Flavor_No': Flavor_No,
      'Composition': Composition,
      'Packing': Packing,
      'Carton': Carton,
      'Lable': Lable,
      'Bottle': Bottle,
      'Shrink': Shrink,
      'Binding': Binding,
      'Active': Active,
      'NotActive': NotActive,
      'density': density,
      'ORdQty': ORdQty,
      'ExpiryPeriod': ExpiryPeriod,
      'ItemSpec': ItemSpec,
      'originno': originno,
      'pack40': pack40,
      'pack20': pack20,
      'brandno': brandno,
      'PrPer': PrPer,
      'Type': Type,
      'ITEM_DESC': ITEM_DESC,
      'TaxNo': TaxNo,
      'smallPrice': smallPrice,
      'accf_no': accf_no,
      'Status': Status,
      'FamilieNo': FamilieNo,
      'accinvf': accinvf,
      'storinvf': storinvf,
      'ItemWeight': ItemWeight,
      'IsActive': IsActive,
      'QRCODE': QRCODE,
      'UseSerial': UseSerial , // Convert to integer
      'Unitsale': Unitsale,
      'Cus_Price': Cus_Price,
      'IsServiceItem': IsServiceItem , // Convert to integer
      'Is_Kit': Is_Kit , // Convert to integer
      'Item_Type': Item_Type,
      'Serial_no': Serial_no,
      'Shortcut_Name': Shortcut_Name,
      'CurrNo': CurrNo,
      'StartSerial': StartSerial,
    };
  }
  factory ItemModel.fromJson(Map<String, dynamic> json) {
    return ItemModel(
      Item_No: json['item_No'],
      Item_Name: json['item_Name'],
      Ename: json['ename'],
      Unit: json['unit'],
      Price: json['price'],
      OL: json['ol'],
      OQ1: json['oQ1'],
      Type_No: json['type_No'],
      pack: json['pack'],
      QOH: json['qoh'],
      OQ2: json['oQ2'],
      place: json['place'],
      Wcost: json['wcost'],
      Ecost: json['ecost'],
      Hcost: json['hcost'],
      Lcost: json['lcost'],
      dno: json['dno'],
      enqty: json['enqty'],
      inqty: json['inqty'],
      resqty: json['resqty'],
      offerqty: json['offerqty'],
      Country: json['country'],
      Original: json['original'],
      tax: json['tax'],
      UnitIn: json['unitIn'],
      UnitOut: json['unitOut'],
      Convert: json['convert'],
      barcode: json['barcode'],
      TaxCheck: json['taxCheck'],
      Expired: json['expired'],
      AllowExp: json['allowExp'],
      Packitem: json['packitem'],
      p_local: json['p_local'],
      p_export: json['p_export'],
      S_cash: json['s_cash'],
      S_debt: json['s_debt'],
      Flavor_No: json['flavor_No'],
      Composition: json['composition'],
      Packing: json['packing'],
      Carton: json['carton'],
      Lable: json['lable'],
      Bottle: json['bottle'],
      Shrink: json['shrink'],
      Binding: json['binding'],
      Active: json['active'],
      NotActive: json['notActive'],
      density: json['density'],
      ORdQty: json['oRdQty'],
      ExpiryPeriod: json['expiryPeriod'],
      ItemSpec: json['itemSpec'],
      originno: json['originno'],
      pack40: json['pack40'],
      pack20: json['pack20'],
      brandno: json['brandno'],
      PrPer: json['PrPer'],
      Type: json['type'],
      ITEM_DESC: json['iteM_DESC'],
      TaxNo: json['taxNo'],
      smallPrice: json['smallPrice'],
      accf_no: json['accf_no'],
      Status: json['status'],
      FamilieNo: json['familieNo'],
      accinvf: json['accinvf'],
      storinvf: json['storinvf'],
      ItemWeight: json['itemWeight'],
      IsActive: json['isActive'],
      QRCODE: json['qrcode'],
      UseSerial: json['useSerial'],
      Unitsale: json['unitsale'],
      Cus_Price: json['cus_Price'],
      IsServiceItem: json['isServiceItem'],
      Is_Kit: json['is_Kit'],
      Item_Type: json['item_Type'],
      Serial_no: json['serial_no'],
      Shortcut_Name: json['shortcut_Name'],
      CurrNo: json['currNo'],
      StartSerial: json['startSerial'],
    );
  }
}